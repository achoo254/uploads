package com.quanly.demo.api;

import java.util.List;

import javax.validation.Valid;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.quanly.demo.mapper.MapperConvert;
import com.quanly.demo.model.CustomerRoom;
import com.quanly.demo.model.Room;
import com.quanly.demo.model.dto.CategoriesDto;
import com.quanly.demo.model.dto.CustomerDto;
import com.quanly.demo.model.dto.CustomerRoomDto;
import com.quanly.demo.model.dto.RoomDto;
import com.quanly.demo.service.CustomerRoomService;
import com.quanly.demo.service.RoomService;

@RestController
@CrossOrigin(origins = "*", allowedHeaders = "*")
@RequestMapping("/customerRoom")
public class CustomerRoomController {
	@Autowired
	CustomerRoomService customerRoomService;
	
	@Autowired
	RoomService roomService;
	
	private final ModelMapper modelMapper = new ModelMapper();
	private final MapperConvert mapperConvert = new MapperConvert();
	
	@GetMapping(value = "/getAll/roomId/{roomId}")
	public ResponseEntity<List<CustomerRoomDto>> findByCustomerRoomRoom(@PathVariable("roomId") int roomId) {
		Room room = 
		List<CustomerRoom> listCustomerRoom = customerRoomService.findByCustomerRoomRoom(roomId);
		if (listCustomerRoom.isEmpty()) {
			return new ResponseEntity(HttpStatus.NO_CONTENT);
		}
		//Mapped
		List<CustomerRoomDto> listCustomerRoomDto = mapperConvert.mapList(listCustomerRoom, CustomerRoomDto.class);
		
		return new ResponseEntity<List<CustomerRoomDto>>(listCustomerRoomDto, HttpStatus.OK);
	}
	
	@GetMapping(value = "/get/{id}")
	public CustomerRoomDto getOne(@PathVariable("id") int id) {
		CustomerRoom customerRoom = customerRoomService.getOne(id);
		if (customerRoom == null) {
			ResponseEntity.notFound().build();
		}
		//Mapped
		CustomerRoomDto customerRoomDto = modelMapper.map(customerRoom, CustomerRoomDto.class);
		
		return customerRoomDto;
	}

	@GetMapping(value = "/get/orderBy/{room_id}")
	public int getOrderBy(@PathVariable("room_id") int room_id) {
		int customerRoom = customerRoomService.getOrderBy(room_id);
		return customerRoom;
	}

	@PostMapping(value = "/post/")
	public CustomerRoom postCustomerRoom(@Valid @RequestBody CustomerRoom customerRoom) {
		return customerRoomService.save(customerRoom);
	}
}
